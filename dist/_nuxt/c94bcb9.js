(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{236:function(t,e){const r={render:function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"frontmatter-markdown"},[r("h3",[t._v("Disclaimer: this beta is a very unoptimized code!")]),t._v(" "),t._m(0),t._v(" "),r("interface-description",{attrs:{image:"json-test-interface.png"}},[r("h3",[t._v("Interface description (test mode)")]),t._v(" "),r("p",[t._v("To test JSON path — put JSON text into the script interface and set output value to text geometry of this container.")]),t._v(" "),r("p",[t._v("Set "),r("strong",[t._v("Test input mode")]),t._v(" to enable test input mode and show textarea for test input.")]),t._v(" "),r("p",[t._v("Fill "),r("strong",[t._v("JSON path")]),t._v(" to get value from any type of ipnut (test or SHM). And, use the result for text geometry or SHM variable.")]),t._v(" "),r("p",[t._v("Set "),r("strong",[t._v("Test output mode (to text)")]),t._v(" to output the result to the text geometry of the current container.")]),t._v(" "),r("p",[t._v("Push "),r("strong",[t._v("Parse")]),t._v(" to convert input text to virtual JSON structure and (optionally) get the result by "),r("strong",[t._v("JSON path")]),t._v(". After this you can use this structure to get value by any another JSON path (inner script function).")])]),t._v(" "),r("p",[t._v("There are avaliable functions:")]),t._v(" "),t._m(1),t._v(" "),r("interface-description",{attrs:{image:"json-get-one-value-interface.png"}},[r("h3",[t._v("Interface description")]),t._v(" "),r("p",[t._v("For working mode you can fill only "),r("strong",[t._v("SHM input nmae")]),t._v(" just to get input JSON text.")]),t._v(" "),r("p",[t._v("If you want only one value — you can define "),r("strong",[t._v("JSON path")]),t._v(" and "),r("strong",[t._v("SHM output name")]),t._v(" to push the result value into SHM variable.")])]),t._v(" "),r("h2",[t._v("How to use")]),t._v(" "),r("p",[t._v("In this beta version you can retrieve information from JSON virtual object by JSON path string.")]),t._v(" "),r("p",[t._v("Example for one value:")]),t._v(" "),t._m(2),t._v(" "),r("br")],1)},staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("This code supports just simple set of functionality.")])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[t._v("sub-objects and values, example: "),r("code",{pre:!0},[t._v("city.coord.lon")])]),t._v(" "),r("li",[t._v("get array value, example: "),r("code",{pre:!0},[t._v("current.list[1]")]),t._v(" is the first value, "),r("code",{pre:!0},[t._v("current.list[-1]")]),t._v(" is the last value")]),t._v(" "),r("li",[t._v("get array values, example: "),r("code",{pre:!0},[t._v("data.names[]")])]),t._v(" "),r("li",[t._v("get array sub-values, example: "),r("code",{pre:!0},[t._v("current.list[].humidity")]),t._v(" gives array of humidities")]),t._v(" "),r("li",[t._v("get elements count of array, example: "),r("code",{pre:!0},[t._v("current.list.count()")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",{pre:!0},[this._v('Dim c_parser As Container = Scene.FindContainer("json_parser")\nDim posX as Double = (Double)c_parser.Script.GetValueOfCurrentByPath("steps[1].points[2].positionX")\n')])])}]};t.exports={attributes:{title:"JSON parser (beta)",description:"Parse JSON string and provide functions for data retrieving by object path like in JavaScript object.",category:"link",link:"https://bitbucket.org/vizrt/vizartist-script/src/master/dudin-parser/dudin-parser-json/",file:"dudin-parser-json.vb"},meta:{resourcePath:"C:\\rails\\dudin.tv\\content\\scripts\\json-parser.md"},vue:{component:{data:function(){return{templateRender:null}},render:function(t){return this.templateRender?this.templateRender():t("div","Rendering")},created:function(){this.templateRender=r.render,this.$options.staticRenderFns=r.staticRenderFns}}}}}}]);