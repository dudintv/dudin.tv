(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{244:function(t,e){const o={render:function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("div",{staticClass:"frontmatter-markdown"},[o("interface-description",{attrs:{image:"autofollow-ui.png"}},[o("h3",[t._v("Interface description")]),t._v(" "),o("p",[o("strong",[t._v("Follow axis")]),t._v(" defines which axis will be controlled in order to position this container.")]),t._v(" "),o("p",[o("strong",[t._v("Direction")]),t._v(" controls which align will be applied. By left edge, by the center, by right edge.")]),t._v(" "),o("p",[o("strong",[t._v("X-pos if self empty")]),t._v(" or "),o("strong",[t._v("Y-pos if self empty")]),t._v(" define the position when this container is empty and has zero bounding box. Useful to avoid blinking effect.")]),t._v(" "),o("p",[o("strong",[t._v("X-pos default")]),t._v(" or "),o("strong",[t._v("Y-pos default")]),t._v(" define the position of this container when target containers are gone. I mean, when the target has zero bounding box (disappear).")]),t._v(" "),o("p",[o("strong",[t._v("Container 1")]),t._v(", "),o("strong",[t._v("Container 2")]),t._v(", ... define observed target containers which will be followed by this container. You can change the count inside the script by changing the "),o("code",{pre:!0},[t._v("quantity_of_container")]),t._v(" variable at the beginning of the script.")])]),t._v(" "),o("p",[t._v("If you have tried to use standard Autofollow plugin you already know its limits.")]),t._v(" "),o("media-image",{attrs:{name:"autofollow-plugin.png"}}),t._v(" "),o("p",[t._v("What I do not like in standard Autofollow:")]),t._v(" "),t._m(0),t._v(" "),o("p",[t._v("Compare standard and my Autofollow:")]),t._v(" "),o("media-youtube",{attrs:{url:"https://www.youtube.com/embed/au4bwUw4Vwg"}}),t._v(" "),o("p",[t._v("For changing the count of observing containers, overwrite this setting:")]),t._v(" "),o("media-image",{attrs:{name:"autofollow-change-count.png"}})],1)},staticRenderFns:[function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ul",[o("li",[t._v("It is working properly only in one space coordinates, it's inside one common parent. And I want to get a result in global coordinates, independently from local scales.")]),t._v(" "),o("li",[t._v("Working properly only with scale = 1.")]),t._v(" "),o("li",[t._v("Every time I need to reinvestigate how it works! It just annoys me.")]),t._v(" "),o("li",[t._v("Stays in the previous position when the target container gets invisible. I need some defined position in this case.")]),t._v(" "),o("li",[t._v("Does not consider invisible object by scaling! If an object is hidden - it’s ok. But if Object is scaled to 0 — it stays active and visible for standard Autofollow.")]),t._v(" "),o("li",[t._v("For the reason above I can’t autofollow to several containers. I want to consider only visible (by visually) objects. If an object is smaller than a pixel I want to mark it as invisible and exclude from autofollow.")]),t._v(" "),o("li",[t._v("Only sharp autofollow, without any inertion. I want to see the natural move of following as it looks pretty nice on the screen.")]),t._v(" "),o("li",[t._v("Always consider the self size. I want to autofollow only pivot point for independent animation of appearing.")])])}]};t.exports={attributes:{title:"Multi Follow",description:"Alternative of standart Autofollow plugin. Can smart follows to several targets.",category:"transformation",link:"https://bitbucket.org/vizrt/vizartist-script/src/master/dudin-autofollow/",file:"autofollow.vb"},meta:{resourcePath:"C:\\rails\\dudin.tv\\content\\scripts\\multi-follow.md"},vue:{component:{data:function(){return{templateRender:null}},render:function(t){return this.templateRender?this.templateRender():t("div","Rendering")},created:function(){this.templateRender=o.render,this.$options.staticRenderFns=o.staticRenderFns}}}}}}]);