(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{241:function(e,t){const r={render:function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"frontmatter-markdown"},[r("h3",[e._v("Disclaimer: this beta is a very unoptimized code!")]),e._v(" "),e._m(0),e._v(" "),r("interface-description",{attrs:{image:"json-test-interface.png"}},[r("h3",[e._v("Interface description (test mode)")]),e._v(" "),r("p",[e._v("To test JSON path — put JSON text into the script interface and set output value to text geometry of this container.")]),e._v(" "),r("p",[e._v("Set "),r("strong",[e._v("Test input mode")]),e._v(" to enable test input mode and show textarea for test input.")]),e._v(" "),r("p",[e._v("Fill "),r("strong",[e._v("JSON path")]),e._v(" to get value from any type of ipnut (test or SHM). And, use the result for text geometry or SHM variable.")]),e._v(" "),r("p",[e._v("Set "),r("strong",[e._v("Test output mode (to text)")]),e._v(" to output the result to the text geometry of the current container.")]),e._v(" "),r("p",[e._v("Push "),r("strong",[e._v("Parse")]),e._v(" to convert input text to virtual JSON structure and (optionally) get the result by "),r("strong",[e._v("JSON path")]),e._v(". After this you can use this structure to get value by any another JSON path (inner script function).")])]),e._v(" "),r("p",[e._v("There are avaliable functions:")]),e._v(" "),e._m(1),e._v(" "),r("interface-description",{attrs:{image:"json-get-one-value-interface.png"}},[r("h3",[e._v("Interface description")]),e._v(" "),r("p",[e._v("For working mode you can fill only "),r("strong",[e._v("SHM input nmae")]),e._v(" just to get input JSON text.")]),e._v(" "),r("p",[e._v("If you want only one value — you can define "),r("strong",[e._v("JSON path")]),e._v(" and "),r("strong",[e._v("SHM output name")]),e._v(" to push the result value into SHM variable.")])]),e._v(" "),r("h2",[e._v("How to use")]),e._v(" "),r("p",[e._v("In this beta version you can retrieve information from JSON virtual object by JSON path string.")]),e._v(" "),r("p",[e._v("Example for one value:")]),e._v(" "),e._m(2),e._v(" "),r("br")],1)},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("This code supports just simple set of functionality.")])])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ul",[r("li",[e._v("sub-objects and values, example: "),r("code",{pre:!0},[e._v("city.coord.lon")])]),e._v(" "),r("li",[e._v("get array value, example: "),r("code",{pre:!0},[e._v("current.list[1]")]),e._v(" is the first value, "),r("code",{pre:!0},[e._v("current.list[-1]")]),e._v(" is the last value")]),e._v(" "),r("li",[e._v("get array values, example: "),r("code",{pre:!0},[e._v("data.names[]")])]),e._v(" "),r("li",[e._v("get array sub-values, example: "),r("code",{pre:!0},[e._v("current.list[].humidity")]),e._v(" gives array of humidities")]),e._v(" "),r("li",[e._v("get elements count of array, example: "),r("code",{pre:!0},[e._v("current.list.count()")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{pre:!0},[this._v('Dim c_parser As Container = Scene.FindContainer("json_parser")\nDim posX as Double = (Double)c_parser.Script.GetValueOfCurrentByPath("steps[1].points[2].positionX")\n')])])}]};e.exports={attributes:{title:"JSON parser (beta)",description:"Parse JSON string and provide functions for data retrieving by object path like in JavaScript object.",category:"link",path:"dudin-parser/dudin-parser-json",file:"dudin-parser-json.vb"},meta:{resourcePath:"/Users/dmitrydudin/vizrt/dudin.tv/content/scripts/json-parser.md"},vue:{component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=r.render,this.$options.staticRenderFns=r.staticRenderFns}}}}}}]);