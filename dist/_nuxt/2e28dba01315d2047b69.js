(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{227:function(e,t){const n={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"frontmatter-markdown"},[n("interface-description",{attrs:{image:"arrange-line-ui.png"}},[n("h3",[e._v("Interface description")]),e._v(" "),n("p",[n("strong",[e._v("Max count in line")]),e._v(" defines the maximum count of items in each line. Less is possible, more is not.")]),e._v(" "),n("p",[n("strong",[e._v("Distance X")]),e._v(" and "),n("strong",[e._v("Distance Y")]),e._v(" define a distance between centres of items by X and Y-axis.")]),e._v(" "),n("p",[n("strong",[e._v("Randomize")]),e._v(" helps to add randomly to items position and make a more lifelike composition.")]),e._v(" "),n("p",[n("strong",[e._v("Sort")]),e._v(' allows you to auto-sort appearing elements. "By tree" takes standard order just exactly as in scene tree. "By name" sorts by name of item names. And, "By text" sorts by the text of certain containers inside each item, for that, you should specify the name of those containers in '),n("strong",[e._v("Text container path")]),e._v(" param. Of course, you can "),n("strong",[e._v("Reverse")]),e._v(" the order of sorting.")])]),e._v(" "),n("p",[e._v('The script works like a built-in "Grid" plugin. Unlike Grid, this script useful for real composition with uncertain count items, which have to be nicely aligned in several lines.')]),e._v(" "),n("media-image",{attrs:{name:"arrange-line-cover.png"}}),e._v(" "),n("p",[e._v('The script takes maximum count items in one line and aligns all items with avoiding non-aesthetic situations. For example, the "widow" item is not good, so this script reduces average count items in a line to avoid "widow" container.')]),e._v(" "),n("p",[e._v("If you can have from 4 to 7 items on the screen, but you can put in a line 4 items maximum — how do you arrange them as a human?")]),e._v(" "),e._m(0),e._v(" "),n("p",[e._v("Look an example with 10 maximum in a line:")]),e._v(" "),n("media-youtube",{attrs:{url:"https://www.youtube.com/embed/wLey8TXrpT8"}}),e._v(" "),n("p",[e._v('Also, you can choose the source of order! And inverse. The most interesting option maybe "by text" — the script looks into each child for a particular container, takes numbers from texts and use them to compare.')]),e._v(" "),n("p",[e._v("Nice to combine with Omo plugin! ;)")]),e._v(" "),e._m(1),e._v(" "),e._m(2)],1)},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("4 items in one line (easy)")]),e._v(" "),n("li",[e._v("5 items in two lines as 3 + 2 "),n("em",[e._v("(not as 4 + 1 !)")])]),e._v(" "),n("li",[e._v("6 items on two lines as 3 + 3 "),n("em",[e._v("(not as 4 + 2 !)")])]),e._v(" "),n("li",[e._v("7 items, anyway, as 4 + 3")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("em",[this._v("Note: This script doesn't consider bounding boxes of a container, there is only containers arrangement by values of offsets.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("For flexible single line layout, I recommend using another my script "),t("a",{attrs:{href:"/scripts/vizartist/flex/"}},[this._v("Flex")])])}]};e.exports={attributes:{title:"Array to lines",description:"Script for aesthetic arrangements of containers in lines",category:"position",link:"https://bitbucket.org/vizrt/vizartist-script/src/master/dudin-transform/dudin-arrange/dudin-arrange-lines/",file:"dudin-arrange-lines.vb"},meta:{resourcePath:"/Users/svetozar/rails/dudin.tv/content/scripts/array-to-lines.md"},vue:{component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=n.render,this.$options.staticRenderFns=n.staticRenderFns}}}}}}]);